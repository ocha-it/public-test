それではGit勉強会をはじめていきます。最初に自己紹介だけさせていただきます。
★
柴田と申します。職業はフリーランスエンジニアです。
もともとSIerの企業でWEBシステムの開発をしておりまして、バックエンドもフロントエンドもひととおり開発しておりました。
現在は個人で案件を請けるほか、IT企業向け新入社員研修講師であったりIT初学者向け教材制作をやっています。
私自身は実は会社員での実務のときはGitやGitHubを使ってバージョン管理をごりごり触っていたわけではないので、実務ではどうですか～などの細かい質問などはお答えできるかわからない部分もあるのですが、IT企業向けの新入社員の研修でもやはりGitの部分はエンジニアとして知っておきましょうということで講義をすることもあります、それくらい大事なところ、かつエンジニアとして最低限の知識ですね　という部分はありますので、今回は基本的にはカリキュラムに沿って、どういうこと言っていますよというのをかみ砕いてご説明していけたらよいなと思っています。
それでは本日の流れのご説明をいたします。
★
本日このような流れで、概ね教材に沿った内容を実施していきます。
Gitとは
GitHubとは
GitHubを使ったリポジトリ操作　ここだけ少し実演をしていきます
★
まずはGitとはどういうものかということについてご説明していきます。
★
Gitはファイルの変更履歴を管理する分散型バージョン管理システムです。
バージョン管理というのはなんとなくイメージできますかね。
ざっくりどういうものかというと、ファイルの更新履歴を記録・管理する仕組みです。
バージョン管理がおこなわれていない状態で複数人でファイルを管理しようとすると、いろんな人がいろんな名前でファイルを保存したり上書きしたり、なんてことが起こります。そうなってくると、「どれが最新版かわからない」であったり、「どこが更新されたのかわからない」といった課題が発生してしまいます。
そこで、バージョン管理システムを使用することによって、ファイルに対して「誰が」「いつ」「何を」「どのように」変更したのか、というような情報を記録することができます。そして、この記録をもとに、過去のある時点の状態へ復元をおこなったり、変更内容の差分を表示できたりします。
これができると何がいいかというと、バージョンを追いかける作業がなくなります。そして、本来進めるべき開発作業に集中できるようになり、大人数での共同作業の効率も向上します。というのがGitを使用する主なメリットとなってきます。
Gitを使用するメリットを確認できたところで、それではGitとはバージョン管理システムの中でもどういうものなのでしょうというところを確認していきましょう。
★
バージョン管理システムは、集中管理方式と分散管理方式があります。Gitは分散管理方式です。
集中管理方式のほうですと、サーバー上に設置したリモートリポジトリというファイルの保管場所でファイル情報を一元管理する、というのに対して、分散管理方式は、ユーザーがそれぞれPC内にリモートリポジトリのコピーを持つ方式です。このリポジトリのコピーを「ローカルリポジトリ」というふうにいいます。
基本的にはこのリモートリポジトリというところを中心に、複数人でファイルの共有をするというのが前提です。
大まかなしくみがわかったところで、分散管理方式であるGitでどういうことができるのかについて、見ていきましょう。
★
Gitの操作っていろいろあってややこしそうだなぁと思っている方々が今日ここに来てくださっているのかなと思うのですが、Gitの操作かなり大まかにわけると２種類だけ理解すれば大丈夫です。
１つは、すでにあるリモートリポジトリのファイルを自分のローカルリポジトリにもってくるということ。
もう１つは、自分のローカルリポジトリにあるファイルをリモートリポジトリにもっていくということです。
この２種類をおこなうにあたってそれぞれ必要な手順があって、その１つ１つに名前がついていたりするのでそれらをGitの基本用語として確認していきます。
スライドにある図は教材の中で使用されているものからの引用です。
さきほどお話したGitの２種類の基本操作のうち１つめから流れを理解していきましょう。
まずはすでにあるリモートリポジトリのファイルを自分のローカルリポジトリにもってくるということなんですけれども、この操作をpullといいます。pullって直訳すると引きだすという感じだと思いますけれども、まさにリモートリポジトリから自分のローカルリポジトリに引き出すということですね。
ファイルの編集を手元で行ったら、今度は自分のローカルリポジトリにあるファイルをリモートリポジトリにもっていって、他の人も見れるようにしたいわけです。
その作業を今度はpullの反対、pushというふうにいいます。直訳すると押す、ですね。
ただ、このpushはファイルを編集してすぐにおこなえるようになるというわけではありません。その前にいくつか段階を踏まなければいけないです。
このときにおこなう作業が３番のadd,commitです。それぞれどういうことをしているかというと、これは次のスライドで確認しましょう。
★
こちらも教材にある図ですね。ここで確認しておきたいのが、ローカルリポジトリの中もさらにローカルブランチというところと追跡ブランチというところにわかれているというところです。
ブランチ（Branch）は「枝」という意味です。Gitでは変更履歴を分岐して管理できるため、同じプロジェクトで複数のバージョン管理をするときにこのブランチを使用します。で、このmasterとかorigin/masterとか書いてあるのがブランチ名ですね。このmasterという部分は2020年あたりから「main」となっていることが多いです。少しこの図の情報が古いですね。
追跡ブランチというのはその名の通り、リモートリポジトリの変更を追跡、追いかけているブランチのことです。ちなみに"origin/master"はリモートリポジトリに存在するmasterブランチの追跡ブランチであって、例えばtestというリモートリポジトリのブランチに対する追跡ブランチの場合は"origin/test"という名前になります。
で。作業ブランチというのは自分が作業するブランチとなります。さらにプロジェクトが Gitで管理されると、それぞれのファイルはローカルリポジトリ外の「ワークツリー」という場所で未追跡（Untracked）として配置されることとなります。
コミットする前に「ワークツリー」にあるファイルをローカルブランチのインデックスに追加する必要があります。インデックスというのは「索引」のようなものだと考えてください。この、ワークツリーからローカルブランチに追加する作業を「add（追加）」といいます。
ローカルブランチに追加したファイルを今度は追跡ブランチに登録したいわけです。それをコミットと言います。コミット（commit）は、ファイルやディレクトリの修正内容をローカルリポジトリに登録する操作で、「リビジョン」ともいいます。
コミットは誰がいつ何を修正をしたかというのを記録するため、とても大事な作業です。そしてこのコミットはハッシュ値という固有のIDのようなものを持っているので、一意に指し示すことができます。ですので後から過去のこのときのコミットに状態戻したいよ～となったら、戻ることもできます。
ここまで用意ができたらpushを行うことによって、ローカルリポジトリからリモートリポジトリにファイルの反映をすることができます。
pushまでの流れについて理解できたでしょうか。
あと最初にご紹介したpullも実はfetchとmergeの2段階にわけることもできます。それぞれ対応関係は図を見ていただければと思います。が、一気にpullしてしまうことが多いのではないかなと思います。
あとこの図には書いていませんがリモートリポジトリからローカルにプロジェクトをコピーしたいときは、初回クローンというものを使ったりもします。これは初回ダウンロードのような処理です。初回時に自分のPCにコピーし、それ以降はpullやpushなどその他のコマンドで同期をとります。
それぞれの単語について整理するためにも後で少し実演をやっていきたいと思いますが、実演をやる前にGitHubについても簡単に確認しておきたいと思います。

★
GitHubとは、インターネット上に用意されたGitサーバの一つです。開発者の間では広く使用され一般的なものとなっています。

Gitを管理するには Gitサーバを用意してリモートリポジトリを作成する必要があります。しかし、自分で Gitサーバをたてるにはサーバー構築や運用をしなければいけないため、ハードルが高くなります。

GitHubはアカウント登録するだけで原則無料で利用することができます。またインターネット上で世界中に公開することもできます。エンジニア各々がプログラムをアップして自分以外のエンジニアに共有し、履歴を残しながら更新したり、自分以外のエンジニアも修正を加えることが可能です。

Gitを利用したサービスは、GitHub の他にもBitbucketやBacklogなど複数存在しています。そのため、Gitを使うためには必ずGitHubを使う必要があるわけではありませんということをエンジニアであれば理解しておいてください。

この2つの関係は「メールとGmail」の関係にも似ています。Gmailはメールというツールを利用するためのWebサービスであり、メールを利用したサービスはGmailの他にもYahoo!メールやHotmailなどがあります。

GitHubでは、ソースコードの共有ができるほか、コードレビューの依頼であったり、プロジェクトの課題管理などGitHub特有の便利な機能があります。複数人でシステムの開発をおこなうにあたって、欠かせないツールですね。
それでは、このGitHubを使って、教材にあるコマンドたちを試していきたいと思います。
★
このような順番で試していきます。
（１）GitHubでのリモートリポジトリ作成
（２）プロジェクトのadd,commit,push
（３）プロジェクトのclone

それではGitHubからリモートリポジトリを作成してみます。
★
WebブラウザからGitHubを開き、New Repositoryからリモートリポジトリの作成をします。
今回手元にあるportfolio-grayというプロジェクトを公開したいと思います。
そのためリモートリポジトリの名前をportfolio-grayにします。

リポジトリの設定をPublicにした場合、誰でも見られる状態となります。 公開してもよいコードであればPublicで問題ないですが、そうでなければPrivateにしておきましょう。 
Privateにすることで、自分もしくは自分が許可したユーザのみに公開することができます。

作成したらURLがわかりますので、ローカルリポジトリと紐づけを行います。
ここから教材の内容を参考に見ていきましょう。
Lesson2のGitHubのほうですね
★
ローカルにGitリポジトリを作成する
VSCodeを開いてGit Bashを開いています。対象のディレクトリにいる状態なのでgit initから始めます。
git init

GitHubで作成したリモートリポジトリのURLを「origin」という名前で登録します。この作業は、Git管理設定する初回時だけの作業です。

$ git remote add origin リポジトリURL
リモートリポジトリの確認

リモートリポジトリの確認は、git remoteコマンドを利用します。

$ git remote -v
リモートリポジトリを設定したら、作成したファイルを「add」「commit」でローカルリポジトリに登録し、「push」コマンドで GitHubプッシュします。

このへんのコマンドは１つ前の教材にのっているので確認しましょう

addコマンド
プロジェクトが Git 管理されると各ファイルは「ワークツリー」という場所に未追跡（Untracked）として配置されます。コミットする前に「ワークツリー」にあるファイルをインデックスに追加する必要があります。この作業を「add（追加）」といい、以下のコマンドで実行できます。

$ git add ファイル名
すべてのファイルを追加するには、プロジェクトのルートフォルダで「 . 」を指定します。
こちらをやりましょう。

$ git add .

commitコマンド
インデックス情報を更新したらコミットすることができます。コミットするときは他人がわかるようなコメントをつける必要があります。

$ git commit -m "修正内容を記述"

プッシュ（push）は、ローカルリポジトリからリモートリポジトリへ更新をして同期をとる作業です。以下は、リモートリポジトリのoriginからmasterブランチに対してプッシュする操作です。

コマンド

$ git push -u origin master

これでGitHubのほうを確認してみましょう。
ファイルが追加されていることがわかります。publicで共有していますので、このURLを共有すればみんなこのコードを見ることができるようになりました。

あとはcloneとかも試しておきますか…
